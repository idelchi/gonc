package main

import (
	"fmt"
	"os"
	"runtime"
	"strings"

	"github.com/idelchi/gonc/internal/commands"
	"github.com/idelchi/gonc/internal/config"
	"github.com/spf13/viper"
)

var version = "unknown - unofficial & generated by unknown"

func main() {
	if err := run(); err != nil {
		fmt.Fprintf(os.Stderr, "Error: %v\n", err)
		os.Exit(1)
	}
}

func run() error {
	// Configure viper first
	viper.SetEnvPrefix("gonc")
	viper.SetEnvKeyReplacer(strings.NewReplacer(".", "_"))
	viper.AutomaticEnv()

	cfg := &config.Config{}

	root := commands.NewRootCmd(cfg)
	root.Version = version

	// Add persistent flags - they'll be automatically bound by viper
	root.Flags().StringP("key", "k", "", "Encryption key (32 bytes, hex-encoded)")
	root.Flags().IntP("parallel", "j", runtime.NumCPU(), "Number of parallel workers")

	gen := commands.NewGenerateCmd()
	encrypt := commands.NewEncryptCmd(cfg)
	decrypt := commands.NewDecryptCmd(cfg)

	root.Flags().String("encrypt-ext", ".enc", "Suffix to append to encrypted files")
	root.Flags().String("decrypt-ext", "", "Suffix to append to decrypted files. If empty, the suffix will be removed")


	// Add commands
	root.AddCommand(
		gen,
		encrypt,
		decrypt,
	)

	encrypt.Flags().BoolP("deterministic", "d", false, "Use deterministic encryption mode")

	root.CompletionOptions.HiddenDefaultCmd = true

	return root.Execute()
}
