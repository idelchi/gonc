package main

import (
	"fmt"
	"os"
	"strings"

	"github.com/idelchi/gonc/internal/commands"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var version = "unknown - unofficial & generated by unknown"

func main() {
	if err := run(); err != nil {
		fmt.Fprintf(os.Stderr, "Error: %v\n", err)
		os.Exit(1)
	}
}

func run() error {
	// Configure viper first
	viper.SetEnvPrefix("gonc")
	viper.SetEnvKeyReplacer(strings.NewReplacer(".", "_"))
	viper.AutomaticEnv()

	root := &cobra.Command{
		Use:   "gonc",
		Short: "File encryption utility",
		Long: `A file encryption utility that supports deterministic and non-deterministic modes.
Provides commands for key generation, encryption, and decryption.`,
	}

	root.CompletionOptions.DisableDefaultCmd = true

	// Add persistent flags - they'll be automatically bound by viper
	root.PersistentFlags().StringP("key", "k", "", "Encryption key (32 bytes, hex-encoded)")
	root.PersistentFlags().IntP("parallel", "j", 20, "Number of parallel workers")
	root.PersistentFlags().String("encrypt-suffix", ".enc", "Suffix to append to encrypted files")
	root.PersistentFlags().String("decrypt-suffix", "", "Suffix to append to decrypted files. If empty, the suffix will be removed")

	gen := commands.NewGenerateCmd()
	encrypt := commands.NewEncryptCmd()
	decrypt := commands.NewDecryptCmd()

	gen.SetHelpFunc(func(command *cobra.Command, strings []string) {
		// Hide flag for this command
		command.Flags().MarkHidden("key")
		command.Flags().MarkHidden("parallel")
		// Call parent help func
		command.Parent().HelpFunc()(command, strings)
	})

	// Add commands
	root.AddCommand(
		gen,
		encrypt,
		decrypt,
	)

	encrypt.Flags().BoolP("deterministic", "d", false, "Use deterministic encryption mode")

	root.CompletionOptions.HiddenDefaultCmd = true

	return root.Execute()
}
